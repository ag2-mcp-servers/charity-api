# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:49:12+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Address(BaseModel):
    city: Optional[str] = Field(
        None, description='The city of the charitable organization.'
    )
    country: Optional[str] = Field(
        None,
        description='The two-letter <a href="https://www.iso.org/iso-3166-country-codes.html ">ISO 3166</a> standard of the country of the address. For implementation help, refer to <a href=\'https://developer.ebay.com/api-docs/commerce/charity/types/bas:CountryCodeEnum\'>eBay API documentation</a>',
    )
    postalCode: Optional[str] = Field(
        None, description='The postal code of the charitable organization.'
    )
    stateOrProvince: Optional[str] = Field(
        None, description='The state or province of the charitable organization.'
    )


class ErrorParameter(BaseModel):
    name: Optional[str] = Field(None, description='The object of the error.')
    value: Optional[str] = Field(None, description='The value of the object.')


class GeoCoordinates(BaseModel):
    latitude: Optional[float] = Field(
        None, description='The latitude component of the geographic coordinate.'
    )
    longitude: Optional[float] = Field(
        None, description='The longitude component of the geographic coordinate.'
    )


class Image(BaseModel):
    height: Optional[str] = Field(None, description='The height of the logo image.')
    imageUrl: Optional[str] = Field(
        None, description='The URL to the logo image location.'
    )
    width: Optional[str] = Field(None, description='The width of the logo image.')


class Location(BaseModel):
    address: Optional[Address] = Field(
        None, description='The address of the charitable organization.'
    )
    geoCoordinates: Optional[GeoCoordinates] = Field(
        None, description='The geo-coordinates of the charitable organization.'
    )


class CharityOrg(BaseModel):
    charityOrgId: Optional[str] = Field(
        None, description='The ID of the charitable organization.'
    )
    description: Optional[str] = Field(
        None, description='The description of the charitable organization.'
    )
    location: Optional[Location] = Field(
        None, description='The location details of the charitable organization.'
    )
    logoImage: Optional[Image] = Field(
        None, description='The logo of the charitable organization.'
    )
    missionStatement: Optional[str] = Field(
        None, description='The mission statement of the charitable organization.'
    )
    name: Optional[str] = Field(
        None, description='The name of the charitable organization.'
    )
    registrationId: Optional[str] = Field(
        None,
        description='The registration ID for the charitable organization.<br /><br /><span class="tablenote"><span style="color:#004680"><strong>Note:</strong></span> For the US marketplace, this is the EIN.</span>',
    )
    website: Optional[str] = Field(
        None, description='The link to the website for the charitable organization.'
    )


class CharitySearchResponse(BaseModel):
    charityOrgs: Optional[List[CharityOrg]] = Field(
        None,
        description='The list of charitable organizations that match the search criteria.',
    )
    href: Optional[str] = Field(
        None, description='The relative path to the current set of results.'
    )
    limit: Optional[int] = Field(
        None,
        description='The number of items, from the result set, returned in a single page.<br /><br /><b>Valid Values:</b> <code>1-100</code><br /><br /><b>Default:</b> <code>20</code>',
    )
    next: Optional[str] = Field(
        None, description='The relative path to the next set of results.'
    )
    offset: Optional[int] = Field(
        None,
        description='The number of items that will be skipped in the result set. This is used with the <b>limit</b> field to control the pagination of the output.<br /><br />For example, if the <b>offset</b> is set to <code>0</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 1 through 10 from the list of items returned. If the <b>offset</b> is set to <code>10</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 11 through 20 from the list of items returned.<br /><br /><b>Valid Values:</b> <code>0-10,000</code><br /><br /><b>Default:</b> <code>0</code>',
    )
    prev: Optional[str] = Field(
        None, description='The relative path to the previous set of results.'
    )
    total: Optional[int] = Field(
        None, description='The total number of matches for the search criteria.'
    )


class Error(BaseModel):
    category: Optional[str] = Field(None, description='Identifies the type of erro.')
    domain: Optional[str] = Field(
        None,
        description='Name for the primary system where the error occurred. This is relevant for application errors.',
    )
    errorId: Optional[int] = Field(
        None, description='A unique number to identify the error.'
    )
    inputRefIds: Optional[List[str]] = Field(
        None,
        description='An array of request elements most closely associated to the error.',
    )
    longMessage: Optional[str] = Field(
        None, description='A more detailed explanation of the error.'
    )
    message: Optional[str] = Field(
        None,
        description="Information on how to correct the problem, in the end user's terms and language where applicable.",
    )
    outputRefIds: Optional[List[str]] = Field(
        None,
        description='An array of request elements most closely associated to the error.',
    )
    parameters: Optional[List[ErrorParameter]] = Field(
        None,
        description='An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.',
    )
    subdomain: Optional[str] = Field(
        None,
        description='Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.',
    )
