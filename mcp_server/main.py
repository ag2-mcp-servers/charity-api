# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:49:12+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header

from models import CharityOrg, CharitySearchResponse

app = MCPProxy(
    contact={'name': 'eBay Inc,', 'x-twitter': 'ebay'},
    description='The Charity API allows third-party developers to search for and access details on supported charitable organizations.',
    license={
        'name': 'eBay API License Agreement',
        'url': 'https://go.developer.ebay.com/api-license-agreement',
    },
    title='Charity API',
    version='v1.2.1',
    servers=[
        {
            'description': 'Production',
            'url': 'https://api.ebay.com{basePath}',
            'variables': {'basePath': {'default': '/commerce/charity/v1'}},
        }
    ],
)


@app.get(
    '/charity_org',
    description=""" This call is used to search for supported charitable organizations. It allows users to search for a specific charitable organization, or for multiple charitable organizations, from a particular charitable domain and/or geographical region, or by using search criteria.<br /><br />The call returns paginated search results containing the charitable organizations that match the specified criteria. """,
    tags=['charity_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_charity_orgs(
    limit: Optional[str] = None,
    offset: Optional[str] = None,
    q: Optional[str] = None,
    registration_ids: Optional[str] = None,
    x__e_b_a_y__c__m_a_r_k_e_t_p_l_a_c_e__i_d: str = Header(
        ..., alias='X-EBAY-C-MARKETPLACE-ID'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/charity_org/{charity_org_id}',
    description=""" This call is used to retrieve detailed information about supported charitable organizations. It allows users to retrieve the details for a specific charitable organization using its charity organization ID. """,
    tags=['charity_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_charity_org(
    charity_org_id: str,
    x__e_b_a_y__c__m_a_r_k_e_t_p_l_a_c_e__i_d: str = Header(
        ..., alias='X-EBAY-C-MARKETPLACE-ID'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
